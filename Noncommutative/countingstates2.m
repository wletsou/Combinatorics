function output = countingstates2(n,varargin)
    % check strong-connectivity for each state in the n = 4,5,6-network
    p = inputParser;
    p.CaseSensitive = 1;
    addRequired(p,'n',@(X) ismember(X,[4,5,6]));
    parse(p,n,varargin{:});
    start = 2 ^ (2 ^ (n - 1) - 1);
    total = 2 ^ (2 ^ (n - 1)) - 1;
    stepsize = 10 ^ 6;
    count = 0;
    for i = 1:ceil((total - start) / stepsize)
        disp(i)

        A = arrayfun(@str2num,dec2bin((start + (i - 1) * stepsize):min(total,start + i * stepsize - 1))); % 8-15 for n = 3

        if n == 4
            A1 = A( ~arrayfun(@(X) (A(X,8) == 1 & (all(A(X,8) ~= A(X,5:7)) | all(A(X,8) ~= A(X,2:4)))) ...
            | (A(X,7) == 1 & (all(A(X,7) ~= A(X,[3,4])))) ...
            | (A(X,6) == 1 & (all(A(X,6) ~= A(X,[2,4])))) ...
            | (A(X,5) == 1 & (all(A(X,5) ~= A(X,[2,3])))),1:size(A,1)),: );
        elseif n == 5
            A1 = A( ~arrayfun(@(X) (A(X,16) == 1 & (all(A(X,16) ~= A(X,12:15)) | all(A(X,16) ~= A(X,6:11)) | all(A(X,16) ~= A(X,2:5))))  ...
            | (A(X,15) == 1 & (all(A(X,15) ~= A(X,[9,10,11])) | all(A(X,15) ~= A(X,[3,4,5])))) ...
            | (A(X,14) == 1 & (all(A(X,14) ~= A(X,[7,8,11])) | all(A(X,14) ~= A(X,[2,4,5])))) ...
            | (A(X,13) == 1 & (all(A(X,13) ~= A(X,[6,8,10])) | all(A(X,13) ~= A(X,[2,3,5])))) ...
            | (A(X,12) == 1 & (all(A(X,12) ~= A(X,[6,7,9])) | all(A(X,12) ~= A(X,[2,3,4])))) ...
            | (A(X,11) == 1 & all(A(X,11) ~= A(X,[4,5]))) ...
            | (A(X,10) == 1 & all(A(X,10) ~= A(X,[3,5]))) ...
            | (A(X,9) == 1 & all(A(X,9) ~= A(X,[3,4]))) ...
            | (A(X,8) == 1 & all(A(X,8) ~= A(X,[2,5]))) ...
            | (A(X,7) == 1 & all(A(X,7) ~= A(X,[2,4]))) ...
            | (A(X,6) == 1 & all(A(X,6) ~= A(X,[2,3]))),1:size(A,1)),: );
        elseif n == 6
            A1 = A( ~arrayfun(@(X) (A(X,32) == 1 & all(A(X,32) ~= A(X,[27,28,29,30,31]))) ... % | all(A(X,16) ~= A(X,6:11)))) ...
            | (A(X,31) == 1 & all(A(X,31) ~= A(X,[23,24,25,26]))) ...
            | (A(X,30) == 1 & all(A(X,30) ~= A(X,[20,21,22,26]))) ...
            | (A(X,29) == 1 & all(A(X,29) ~= A(X,[18,19,22,25]))) ...
            | (A(X,28) == 1 & all(A(X,28) ~= A(X,[17,19,21,24]))) ...
            | (A(X,27) == 1 & all(A(X,27) ~= A(X,[17,18,20,23]))) ...
            | (A(X,26) == 1 & all(A(X,26) ~= A(X,[14,15,16]))) ...
            | (A(X,25) == 1 & all(A(X,25) ~= A(X,[12,13,16]))) ... 
            | (A(X,24) == 1 & all(A(X,24) ~= A(X,[11,13,15]))) ...
            | (A(X,23) == 1 & all(A(X,23) ~= A(X,[11,12,14]))) ...
            | (A(X,22) == 1 & all(A(X,22) ~= A(X,[9,10,16]))) ...
            | (A(X,21) == 1 & all(A(X,21) ~= A(X,[8,10,15]))) ...
            | (A(X,20) == 1 & all(A(X,20) ~= A(X,[8,9,14]))) ...
            | (A(X,19) == 1 & all(A(X,19) ~= A(X,[7,10,13]))) ...
            | (A(X,18) == 1 & all(A(X,18) ~= A(X,[7,9,12]))) ...
            | (A(X,17) == 1 & all(A(X,17) ~= A(X,[7,8,11]))) ...
            | (A(X,16) == 1 & all(A(X,16) ~= A(X,[5,6]))) ...
            | (A(X,15) == 1 & all(A(X,15) ~= A(X,[4,6]))) ...
            | (A(X,14) == 1 & all(A(X,14) ~= A(X,[4,5]))) ...
            | (A(X,13) == 1 & all(A(X,13) ~= A(X,[3,6]))) ...
            | (A(X,12) == 1 & all(A(X,12) ~= A(X,[3,5]))) ...
            | (A(X,11) == 1 & all(A(X,11) ~= A(X,[3,4]))) ...
            | (A(X,10) == 1 & all(A(X,10) ~= A(X,[2,6]))) ...
            | (A(X,9) == 1 & all(A(X,9) ~= A(X,[2,5]))) ...
            | (A(X,8) == 1 & all(A(X,8) ~= A(X,[2,4]))) ...
            | (A(X,7) == 1 & all(A(X,7) ~= A(X,[2,3]))),1:size(A,1)),: );
       end
       count = count + size(A1,1);
       if ~isempty(A1)
           disp({num2str(start + i * stepsize - 1,100),num2str(count,100)})
       end
    end
    
    output = num2str(count,100);
    disp(output)
end